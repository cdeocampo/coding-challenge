---
AWSTemplateFormatVersion: "2010-09-09"

Description:
  This CloudFormation script will create the web-tier

Parameters:
  SSHKeyNameParam:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Amazon EC2 Key Pair
  VpcIdParam:
    Type: AWS::EC2::VPC::Id
    Description: VPC Id where to put the servers
  PublicSubnetsParam:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Public subnets for application load balancer
  PrivateSubnetsParam:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Private subnets for web server
  InitialWebServerCapacityParam:
    Type: Number
    MinValue: 1
    MaxValue: 5
    Description: Initial number of instances acting as web server

Mappings:
  Ami:
    ap-southeast-1:
      WebServer: ami-4f89f533

Resources:
  AppLBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Application Load Balancer
      VpcId: !Ref VpcIdParam
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: TRIBE Application LB SG

  WebTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 60
      UnhealthyThresholdCount: 10
      HealthCheckPath: /
      Port: 8080
      Protocol: HTTP
      VpcId: !Ref VpcIdParam

  AppLB8080Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebTargetGroup
      LoadBalancerArn: !Ref AppLB
      Port: 8080
      Protocol: HTTP

  AppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: tribe-app-lb
      Scheme: internet-facing
      SecurityGroups:
        - !Ref AppLBSecurityGroup
      Subnets: !Ref PublicSubnetsParam
      Type: application

  EcsServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2008-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ecs.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole

  EcsCluster:
    Type: AWS::ECS::Cluster

  WebTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: WebServer
          Image: hello-world
          Cpu: 10
          Memory: 128
          PortMappings:
            - ContainerPort: 8080
              HostPort: 8080
          EntryPoint:
            - /usr/sbin/apache2
            - -D
            - FOREGROUND
          Essential: true
      Family: webserver

  WebApp:
    Type: AWS::ECS::Service
    DependsOn:
    - AppLB8080Listener
    Properties:
      Role: !Ref EcsServiceRole
      TaskDefinition: !Ref WebTaskDefinition
      DesiredCount: 1
      LoadBalancers:
      - TargetGroupArn: !Ref WebTargetGroup
        ContainerPort: 8080
        ContainerName: WebServer
      Cluster: !Ref EcsCluster

Outputs:
  ApplicationDnsName:
    Description: DNS name for the load balanced application
    Value: !GetAtt AppLB.DNSName