---
AWSTemplateFormatVersion: "2010-09-09"

Description:
  This CloudFormation script will create the web-tier

Parameters:
  SSHKeyNameParam:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Amazon EC2 Key Pair
  VpcIdParam:
    Type: AWS::EC2::VPC::Id
    Description: VPC Id where to put the servers
  PublicSubnetsParam:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Public subnets for application load balancer
  PrivateSubnetsParam:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Private subnets for web server
  InitialWebServerCapacityParam:
    Type: Number
    MinValue: 1
    MaxValue: 5
    Description: Initial number of instances acting as web server

Mappings:
  Ami:
    ap-southeast-1:
      ContainerInstance: ami-f88ade84

Resources:
  AppLBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Application Load Balancer
      VpcId: !Ref VpcIdParam
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: TRIBE Application LB SG

  ContainerInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Only allow IPs or SGs that only need to access the container instances
      VpcId: !Ref VpcIdParam
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        SourceSecurityGroupId: !Ref AppLBSecurityGroup
      Tags:
      - Key: Name
        Value: TRIBE Web Server SG

  EcsAutoScaleRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2008-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ecs.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole

  EcsForEc2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2008-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ecs.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

  EcsForEc2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - !Ref EcsForEc2Role

  ContainerInstanceLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [Ami, !Ref "AWS::Region", ContainerInstance]
      IamInstanceProfile: !Ref EcsForEc2InstanceProfile
      InstanceType: t2.micro
      SecurityGroups:
        - !Ref ContainerInstanceSecurityGroup
      KeyName: !Ref SSHKeyNameParam
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster} >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ContainerInstanceLaunchConfig --region ${AWS::Region}

  WebTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Port: 8080
      Protocol: HTTP
      VpcId: !Ref VpcIdParam

  ContainerInstanceAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref ContainerInstanceLaunchConfig
      TargetGroupARNs:
        - !Ref WebTargetGroup
      MinSize: 1
      MaxSize: 4
      DesiredCapacity: !Ref InitialWebServerCapacityParam
      VPCZoneIdentifier: !Ref PrivateSubnetsParam
      Tags:
      - Key: Name
        Value: TRIBE Container Instance
        PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: 'true'

  WebScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 2
      MinCapacity: 1
      ResourceId: !Join ['', [service/, !Ref EcsCluster, /, !GetAtt WebApp.Name]]
      RoleARN: !GetAtt EcsAutoScaleRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  WebScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: AStepPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref WebScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 200

  WebServerAutoScalingPolicyAddInstance:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ContainerInstanceAutoScalingGroup
      Cooldown: 120 # 2 minutes
      ScalingAdjustment: 1

  WebServerAutoScalingPolicyRemoveInstance:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ContainerInstanceAutoScalingGroup
      Cooldown: 120 # 2 minutes
      ScalingAdjustment: -1

  WebServerCPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm if CPU if cpu averages > 80 for 60 seconds
      MetricName: CPUUtilization
      AlarmActions:
      -  !Ref WebServerAutoScalingPolicyAddInstance
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref ContainerInstanceAutoScalingGroup
      Namespace: AWS/EC2
      EvaluationPeriods: 1
      Period: 60 # 1 minute
      Statistic: Average
      Threshold: 80

  WebServerCPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm if CPU if cpu averages < 30 for 3 minutes
      MetricName: CPUUtilization
      AlarmActions:
      -  !Ref WebServerAutoScalingPolicyRemoveInstance
      ComparisonOperator: LessThanThreshold
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref ContainerInstanceAutoScalingGroup
      Namespace: AWS/EC2
      EvaluationPeriods: 3
      Period: 60 # 1 minute
      Statistic: Average
      Threshold: 30

  AppLB8080ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref WebTargetGroup
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref AppLB8080Listener
      Priority: 1

  AppLB8080Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebTargetGroup
      LoadBalancerArn: !Ref AppLB
      Port: 8080
      Protocol: HTTP

  AppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: tribe-app-lb
      Scheme: internet-facing
      SecurityGroups:
        - !Ref AppLBSecurityGroup
      Subnets: !Ref PublicSubnetsParam
      Type: application

  EcsServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2008-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ecs.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole

  EcsCluster:
    Type: AWS::ECS::Cluster

  WebTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: WebServer
          Image: hello-world
          Cpu: 10
          Memory: 128
          PortMappings:
            - ContainerPort: 8080
              HostPort: 8080
          EntryPoint:
            - /usr/sbin/apache2
            - -D
            - FOREGROUND
          Essential: true
      Family: webserver

  WebApp:
    Type: AWS::ECS::Service
    DependsOn:
    - AppLB8080Listener
    Properties:
      Role: !Ref EcsServiceRole
      TaskDefinition: !Ref WebTaskDefinition
      DesiredCount: 1
      LoadBalancers:
      - TargetGroupArn: !Ref WebTargetGroup
        ContainerPort: 8080
        ContainerName: WebServer
      Cluster: !Ref EcsCluster

Outputs:
  ApplicationDnsName:
    Description: DNS name for the load balanced application
    Value: !GetAtt AppLB.DNSName